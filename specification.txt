Simple MicroProcessor Architecture
SMPA CPU v0.1 - Open Source 8bit CPU concept by Nikita Lindmann
https://spiralworlds.space/?page=loca_russian

REGISTERS
aR, bR, cR, dR, eR, fR : Common use registers 
segr, iptr, flags : System use register 
r0, r1, r2, r3, r4, r5 : Reserved
lastR : Last Result register

OPCODES
0000'0000 0000'0000
\_______/ \__/ \__/
 Opcode   Registers

0000'0000 0000'0000
\_______/ \_______/
 Opcode     Value

Memory and register operations
01 ld Reg, Reg //load data from RAM @ reg:reg(page:offset) to _lastr
02 sd Reg, Reg //store data from _lastr to RAM @ reg:reg(page:offset)
03 mv Reg Reg //copy data from first reg to second, _lastr not changes

Math and logic
04 inv Reg //inverts sign of Reg value, save to _lastrs
05 add Reg Reg //add integer value from first reg to second reg, save in _lastr
06 or Reg Reg
07 and Reg Reg
08 not Reg Reg

Branching
09 jmp Reg, Reg //jump to reg:reg(page:offset)
0A eq Reg, Reg //jump to iptr+2 if first reg value != second reg value
0B less Reg, Reg
0C more Reg, Reg
0D leq Reg, Reg
0E meq Reg, Reg
0F neq Reg, Reg

Direct data load
10 ldAR Value //load Value to register aR
11 ldBR Value
12 ldCR Value
13 ldDR Value
14 ldER Value
15 ldFR Value
16 ldFLAGR Value
17 ldLAST Value
18 ldSEGR Value
19 ldIPTR Value

Stack operations
1A ls Reg //Load data from top of stack to _lastr
1B ss Reg //Save data from reg to top of stack

Interruptions and halt
1C int Value //Generate interruption # Value
1D halt //System Halt
1E nop  //Do nothing


MEMORY MODEL
Page 0x00 - system-issued data
Page 0x01 to 0x17 - Console video memory
Page 0x18, 0x00 to 0xA0 - Console video memory
Page 0x19 to 0xFE - User-issued data and programs
Page 0xFF - stack

PAGE MODEL